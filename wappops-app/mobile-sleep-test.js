// üì± Mobile Sleep Mode Notification Tester
console.log('üì± [MOBILE TEST] Starting sleep mode notification analysis...');

// Test current notification setup
async function testMobileSleepMode() {
    console.log('\nüîç MOBILE SLEEP MODE DIAGNOSTIC');
    console.log('=====================================');
    
    // 1. Check current notification permissions
    console.log('\nüìã 1. NOTIFICATION PERMISSIONS:');
    if ('Notification' in window) {
        console.log('‚úÖ Notification API available');
        console.log('üîë Permission:', Notification.permission);
        
        if (Notification.permission === 'granted') {
            console.log('‚úÖ Notifications are allowed');
        } else {
            console.log('‚ùå Notifications blocked - this will cause sleep mode issues');
            console.log('üí° User must enable notifications in browser settings');
        }
    } else {
        console.log('‚ùå Notification API not available');
    }
    
    // 2. Check service worker registration
    console.log('\nüìã 2. SERVICE WORKER STATUS:');
    if ('serviceWorker' in navigator) {
        try {
            const registration = await navigator.serviceWorker.getRegistration();
            if (registration) {
                console.log('‚úÖ Service Worker registered');
                console.log('üìç Scope:', registration.scope);
                console.log('üîÑ State:', registration.active?.state || 'unknown');
                
                // Check if push is supported
                if ('pushManager' in registration) {
                    console.log('‚úÖ Push Manager available');
                    
                    const subscription = await registration.pushManager.getSubscription();
                    if (subscription) {
                        console.log('‚úÖ Push subscription active');
                        console.log('üîë Endpoint type:', subscription.endpoint.includes('fcm') ? 'FCM' : 'Other');
                    } else {
                        console.log('‚ùå No push subscription found');
                    }
                } else {
                    console.log('‚ùå Push Manager not available');
                }
            } else {
                console.log('‚ùå No Service Worker registered');
            }
        } catch (error) {
            console.log('‚ùå Service Worker error:', error.message);
        }
    } else {
        console.log('‚ùå Service Worker not supported');
    }
    
    // 3. Check mobile-specific settings
    console.log('\nüìã 3. MOBILE DETECTION:');
    const isMobile = /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    console.log('üì± Mobile device:', isMobile ? '‚úÖ Yes' : '‚ùå No');
    console.log('üåê User Agent:', navigator.userAgent);
    
    if (isMobile) {
        console.log('\nüì± MOBILE-SPECIFIC CHECKS:');
        
        // Check if running as PWA
        const isPWA = window.matchMedia('(display-mode: standalone)').matches || 
                      window.navigator.standalone === true;
        console.log('üì± Running as PWA:', isPWA ? '‚úÖ Yes' : '‚ùå No');
        
        // Check network status (affects push delivery)
        console.log('üåê Online status:', navigator.onLine ? '‚úÖ Online' : '‚ùå Offline');
        
        // Check battery status (if available)
        if ('getBattery' in navigator) {
            try {
                const battery = await navigator.getBattery();
                console.log('üîã Battery level:', Math.round(battery.level * 100) + '%');
                console.log('üîå Charging:', battery.charging ? '‚úÖ Yes' : '‚ùå No');
            } catch (error) {
                console.log('üîã Battery status not available');
            }
        }
    }
    
    // 4. Test notification creation
    console.log('\nüìã 4. NOTIFICATION TEST:');
    if (Notification.permission === 'granted') {
        try {
            // Create a test notification with mobile-optimized settings
            const testNotification = new Notification('üì± Mobile Sleep Test', {
                body: 'This is a test notification for mobile sleep mode',
                icon: '/pwa-512x512.png',
                badge: '/favicon.ico',
                tag: 'mobile-sleep-test',
                requireInteraction: true,
                vibrate: [300, 100, 300, 100, 300],
                silent: false,
                actions: [
                    {
                        action: 'test',
                        title: '‚úÖ Test OK'
                    }
                ]
            });
            
            console.log('‚úÖ Test notification created');
            
            // Auto-close after 5 seconds
            setTimeout(() => {
                testNotification.close();
                console.log('üîî Test notification closed');
            }, 5000);
            
        } catch (error) {
            console.log('‚ùå Failed to create test notification:', error.message);
        }
    } else {
        console.log('‚ö†Ô∏è Cannot test notifications - permission required');
    }
    
    console.log('\nüìã 5. SLEEP MODE BEHAVIOR EXPLANATION:');
    console.log('=====================================');
    console.log('‚è∞ Expected notification timing:');
    console.log('  ‚Ä¢ 0-5 minutes: ‚úÖ Immediate delivery');
    console.log('  ‚Ä¢ 5-30 minutes: ‚úÖ Within 1-2 minutes');
    console.log('  ‚Ä¢ 30+ minutes: ‚ö†Ô∏è Android Doze mode - delays possible');
    console.log('  ‚Ä¢ 1+ hours: ‚ö†Ô∏è Deep sleep - significant delays');
    console.log('');
    console.log('üì± Mobile OS restrictions (NORMAL behavior):');
    console.log('  ‚Ä¢ Android: Battery optimization affects background apps');
    console.log('  ‚Ä¢ iOS: Very strict background processing limits');
    console.log('  ‚Ä¢ Solution: User must whitelist app from battery optimization');
    console.log('');
    console.log('üí° User action required:');
    console.log('  Android: Settings ‚Üí Battery ‚Üí App optimization ‚Üí [App] ‚Üí Don\'t optimize');
    console.log('  iOS: Settings ‚Üí General ‚Üí Background App Refresh ‚Üí Enable');
}

// Function to schedule test notifications
function scheduleTestNotifications() {
    console.log('\nüß™ SCHEDULING SLEEP MODE TESTS:');
    
    const delays = [1, 5, 10, 30]; // minutes
    
    delays.forEach(delay => {
        const timeoutId = setTimeout(() => {
            if (Notification.permission === 'granted') {
                new Notification(`‚è∞ Sleep Test - ${delay}min`, {
                    body: `Notification after ${delay} minutes of potential sleep`,
                    icon: '/pwa-512x512.png',
                    tag: `sleep-test-${delay}`,
                    requireInteraction: true,
                    vibrate: [300, 100, 300],
                    silent: false
                });
                console.log(`üîî Sleep test notification sent after ${delay} minutes`);
            }
        }, delay * 60 * 1000);
        
        console.log(`‚è∞ Test notification scheduled for ${delay} minutes (ID: ${timeoutId})`);
    });
    
    console.log('üí° Put your device to sleep and wait for notifications!');
    console.log('üìä Check how long each notification takes to appear');
}

// Function to check FCM delivery optimization
function checkFCMOptimization() {
    console.log('\nüì° FCM DELIVERY OPTIMIZATION CHECK:');
    console.log('=====================================');
    
    console.log('‚úÖ Your current FCM setup should include:');
    console.log('  ‚Ä¢ priority: "high" (Android)');
    console.log('  ‚Ä¢ apns-priority: "10" (iOS)');
    console.log('  ‚Ä¢ Urgency: "high" (Web Push)');
    console.log('  ‚Ä¢ TTL: reasonable value (1 hour)');
    console.log('');
    console.log('üí° If notifications still delay significantly:');
    console.log('  1. This is NORMAL mobile behavior for battery saving');
    console.log('  2. Even native apps face similar restrictions');
    console.log('  3. Critical notifications should be sent sparingly');
    console.log('  4. Consider user education about battery settings');
}

// Auto-run the test
testMobileSleepMode();

console.log('\nüéØ QUICK ACTIONS:');
console.log('================');
console.log('‚Ä¢ Run scheduleTestNotifications() to test sleep mode');
console.log('‚Ä¢ Run checkFCMOptimization() for delivery tips');
console.log('‚Ä¢ Check mobile-sleep-mode-guide.md for complete solutions');

// Make functions available globally
window.testMobileSleepMode = testMobileSleepMode;
window.scheduleTestNotifications = scheduleTestNotifications;
window.checkFCMOptimization = checkFCMOptimization;
